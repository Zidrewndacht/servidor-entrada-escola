actions {
  http {
    rf_lido_WH_D {
      connector = connector_rf_lido_WH_D
      description = ""
      enable = true
      parameters {
        headers {}
        max_retries = 2
        method = post
        path = ""
      }
      resource_opts {
        health_check_interval = 15s
        inflight_window = 100
        max_buffer_bytes = 1GB
        query_mode = async
        request_ttl = 45s
        start_after_created = true
        start_timeout = 5s
        worker_pool_size = 4
      }
    }
    rfid_lido_WH_D {
      connector = connector_rfid_lido_WH_D
      description = ""
      enable = false
      parameters {
        headers {}
        max_retries = 2
        method = post
        path = ""
      }
      resource_opts {
        health_check_interval = 15s
        inflight_window = 100
        max_buffer_bytes = 1GB
        query_mode = async
        request_ttl = 45s
        start_after_created = true
        start_timeout = 5s
        worker_pool_size = 4
      }
    }
  }
}
authentication = [
  {
    backend = built_in_database
    mechanism = password_based
    password_hash_algorithm {name = sha256, salt_position = suffix}
    user_id_type = username
  }
]
connectors {
  http {
    connector_rf_lido_WH_D {
      connect_timeout = 15s
      description = ""
      enable = true
      enable_pipelining = 100
      headers {X-Auth-Token = fkhjgdiojhhjg984w5u8quaj09g54, content-type = "application/json"}
      pool_size = 8
      pool_type = hash
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = 5s
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_peer
        versions = [tlsv1.3, tlsv1.2]
      }
      url = "https://127.0.0.1:4443/rfid_lido"
    }
    connector_rfid_lido_WH_D {
      connect_timeout = 15s
      description = ""
      enable = false
      enable_pipelining = 100
      headers {content-type = "application/json"}
      pool_size = 8
      pool_type = hash
      ssl {
        ciphers = []
        depth = 10
        enable = false
        hibernate_after = 5s
        log_level = notice
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_peer
        versions = [tlsv1.3, tlsv1.2]
      }
      url = "https://127.0.0.1:4443/rfid_lido"
    }
  }
}
listeners {
  ssl {
    default {
      acceptors = 16
      access_rules = ["allow all"]
      bind = "0.0.0.0:8883"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      ssl_options {
        cacertfile = "data/certs/listeners/ssl/default/cacert-8FB9EC7776EB670C"
        certfile = "data/certs/listeners/ssl/default/cert-F6BE141957214D6A"
        ciphers = []
        client_renegotiation = true
        depth = 10
        enable_crl_check = false
        fail_if_no_peer_cert = false
        gc_after_handshake = false
        handshake_timeout = 15s
        hibernate_after = 5s
        honor_cipher_order = true
        keyfile = "data/certs/listeners/ssl/default/key-9B0D7783E32C86E8"
        log_level = notice
        ocsp {
          enable_ocsp_stapling = false
          refresh_http_timeout = 15s
          refresh_interval = 5m
        }
        password = E2160M0
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [tlsv1.3, tlsv1.2]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
    }
    ipv6 {
      acceptors = 16
      access_rules = ["allow all"]
      bind = ":::8883"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      ssl_options {
        cacertfile = "data/certs/listeners/ssl/ipv6/cacert-CB486BE00C04B274"
        certfile = "data/certs/listeners/ssl/ipv6/cert-262DF83EC6E9B9FC"
        ciphers = []
        client_renegotiation = true
        depth = 10
        enable_crl_check = false
        fail_if_no_peer_cert = false
        gc_after_handshake = false
        handshake_timeout = 15s
        hibernate_after = 5s
        honor_cipher_order = true
        keyfile = "data/certs/listeners/ssl/ipv6/key-0D70A7CC48D12059"
        log_level = notice
        ocsp {
          enable_ocsp_stapling = false
          refresh_http_timeout = 15s
          refresh_interval = 5m
        }
        password = E2160M0
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [tlsv1.3, tlsv1.2]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
    }
  }
  tcp {
    default {
      acceptors = 16
      access_rules = ["allow all"]
      bind = "0.0.0.0:1883"
      enable = false
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
    }
    ipv6 {
      acceptors = 16
      access_rules = ["allow all"]
      bind = ":::1883"
      enable = false
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
    }
  }
  ws {
    default {
      acceptors = 16
      access_rules = ["allow all"]
      bind = "0.0.0.0:8083"
      enable = false
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = 7200s
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = x-forwarded-for
        proxy_port_header = x-forwarded-port
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
      }
    }
    ipv6 {
      acceptors = 16
      access_rules = ["allow all"]
      bind = ":::8083"
      enable = false
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = 7200s
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = x-forwarded-for
        proxy_port_header = x-forwarded-port
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
      }
    }
  }
  wss {
    default {
      acceptors = 16
      access_rules = ["allow all"]
      bind = "0.0.0.0:8084"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      ssl_options {
        cacertfile = "data/certs/listeners/wss/default/cacert-B0863C609413B23A"
        certfile = "data/certs/listeners/wss/default/cert-F111C3A7709D106B"
        ciphers = []
        client_renegotiation = true
        depth = 10
        fail_if_no_peer_cert = false
        handshake_timeout = 15s
        hibernate_after = 5s
        honor_cipher_order = true
        keyfile = "data/certs/listeners/wss/default/key-5A60A0F5DD2C1887"
        log_level = notice
        password = E2160M0
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [tlsv1.3, tlsv1.2]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = 7200s
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = x-forwarded-for
        proxy_port_header = x-forwarded-port
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
      }
    }
    ipv6 {
      acceptors = 16
      access_rules = ["allow all"]
      bind = ":::8084"
      enable = true
      enable_authn = true
      max_connections = infinity
      mountpoint = ""
      proxy_protocol = false
      proxy_protocol_timeout = 3s
      ssl_options {
        cacertfile = "data/certs/listeners/wss/ipv6/cacert-9FBC12BB1A717108"
        certfile = "data/certs/listeners/wss/ipv6/cert-04FBC17BE169CCD9"
        ciphers = []
        client_renegotiation = true
        depth = 10
        fail_if_no_peer_cert = false
        handshake_timeout = 15s
        hibernate_after = 5s
        honor_cipher_order = true
        keyfile = "data/certs/listeners/wss/ipv6/key-34342514B1FE9B2A"
        log_level = notice
        password = E2160M0
        reuse_sessions = true
        secure_renegotiate = true
        verify = verify_none
        versions = [tlsv1.3, tlsv1.2]
      }
      tcp_options {
        active_n = 100
        backlog = 1024
        buffer = 4KB
        high_watermark = 1MB
        keepalive = none
        nodelay = true
        reuseaddr = true
        send_timeout = 15s
        send_timeout_close = true
      }
      websocket {
        allow_origin_absence = true
        check_origin_enable = false
        check_origins = "http://localhost:18083, http://127.0.0.1:18083"
        compress = false
        deflate_opts {
          client_context_takeover = takeover
          client_max_window_bits = 15
          mem_level = 8
          server_context_takeover = takeover
          server_max_window_bits = 15
          strategy = default
        }
        fail_if_no_subprotocol = true
        idle_timeout = 7200s
        max_frame_size = infinity
        mqtt_path = "/mqtt"
        mqtt_piggyback = multiple
        proxy_address_header = x-forwarded-for
        proxy_port_header = x-forwarded-port
        supported_subprotocols = "mqtt, mqtt-v3, mqtt-v3.1.1, mqtt-v5"
      }
    }
  }
}
rule_engine {
  ignore_sys_message = true
  jq_function_default_timeout = 10s
  rules {
    rf_lido_WH_D {
      actions = ["webhook:rf_lido_WH_D"]
      description = "RFID lido, separado por matrícula."
      enable = true
      metadata {created_at = 1718298957153}
      name = ""
      sql = "SELECT\n  *\nFROM\n  \"rfid_lido/#\""
    }
    rfid_lido_WH_D {
      actions = ["webhook:rfid_lido_WH_D"]
      description = ""
      enable = false
      metadata {created_at = 1716655974417}
      name = ""
      sql = "SELECT\n  *\nFROM\n  \"rfid_lido\""
    }
  }
}
